package TDAArbolBinario;

import java.util.Iterator;

import Excepciones.BoundaryViolationException;
import Excepciones.EmptyTreeException;
import Excepciones.InvalidOperationException;
import Excepciones.InvalidPositionException;
import TDAArbol.TNodo;
import TDALista.ListaDE;
import TDALista.Position;
import TDALista.PositionList;

public class ArbolBinario<E> implements BinaryTree<E> {

	private BTNodo<E> raiz;
	private int size;
	
	public ArbolBinario() {
		raiz = null;
		size = 0;
	}
	
	public int size() {
		return size;
	}

	public boolean isEmpty() {
		return size==0;
	}

	public Iterator<E> iterator() {
		PositionList<E> ret = new ListaDE<E>();
		if(raiz!=null) {
		PositionList<Position<E>> aux = new ListaDE<Position<E>>();
		preorden(aux,raiz);
		for(Position<E> p:aux)
			ret.addLast(p.element());
		}
		return ret.iterator();
	}
	
	private BTNodo<E> checkPosition(Position<E> p) throws InvalidPositionException{
		BTNodo<E> ret = null;
		if(p==null || raiz==null) throw new InvalidPositionException("Posicion Invalida");
		try {
			ret = (BTNodo<E>) p;
		}
		catch(ClassCastException e) {
			throw new InvalidPositionException("La posicion no es nodo");
		}
		return ret;
	}
	
	private void preorden(PositionList<Position<E>> l, Position<E> p){
		try {
		l.addLast(p);
		BTNodo<E> n = checkPosition(p);
			if(this.hasLeft(n)) 
				preorden(l,n.getLeft());
			if(this.hasRight(n)) 
				preorden(l,n.getRight());
		} catch (InvalidPositionException e) {e.printStackTrace();}
		
	}
	
	private void posorden(PositionList<Position<E>> l, Position<E> p){
		try {
			BTNodo<E> n = checkPosition(p);
			if(this.hasLeft(n)) 
				preorden(l,n.getLeft());
			if(this.hasRight(n)) 
				preorden(l,n.getRight());
		} catch (InvalidPositionException e) {e.printStackTrace();}
		l.addLast(p);
	}
	
	public Iterable<Position<E>> positions() {
		PositionList<Position<E>> nueva = new ListaDE<Position<E>>();
		if(raiz!=null)
			posorden(nueva,raiz);
		return nueva;
	}

	public E replace(Position<E> v, E e) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(v);
		E ret = n.element();
		n.setElement(e);
		return ret;
	}

	public Position<E> root() throws EmptyTreeException {
		if(raiz==null || size==0) throw new EmptyTreeException("Arbol vacio");
		return raiz;
	}

	public Position<E> parent(Position<E> v) throws InvalidPositionException, BoundaryViolationException {
		if(v==raiz) throw new BoundaryViolationException("No se puede pedir padre a la raiz");
		BTNodo<E> n = checkPosition(v);
		return n.getParent();
	}

	public Iterable<Position<E>> children(Position<E> v) throws InvalidPositionException {
		PositionList<Position<E>> ret = new ListaDE<Position<E>>();
		BTNodo<E> nodo = checkPosition(v);
		BTNodo<E> aux1 = nodo;
		while(aux1.getLeft()!=null) {
			ret.addLast(nodo.getLeft());
			aux1 = aux1.getLeft();
		}
		BTNodo<E> aux2 = nodo;
		while(aux2.getRight()!=null) {
			ret.addLast(nodo.getRight());
			aux2 = aux2.getRight();
		}
		return ret;
	}

	public boolean isInternal(Position<E> v) throws InvalidPositionException {
		BTNodo<E> nodo = checkPosition(v);
		if(nodo.getLeft()!=null || nodo.getRight()!=null) return true;
		else return false;
	}

	public boolean isExternal(Position<E> v) throws InvalidPositionException {
		BTNodo<E> nodo = checkPosition(v);
		if(nodo.getLeft()==null && nodo.getRight()==null) return true;
		else return false;
	}

	public boolean isRoot(Position<E> v) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(v);
		if(n!=raiz) return false;
		else return true;
	}

	public void createRoot(E e) throws InvalidOperationException {
		if(raiz!=null) throw new InvalidOperationException("El arbol ya tiene raiz");
		BTNodo<E> newRoot = new BTNodo<E>(e,null,null,null);
		raiz = newRoot;
		size = 1;
	}

	public Position<E> addFirstChild(Position<E> p, E e) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(p);
		if(n.getLeft()!=null) throw new InvalidPositionException("La posicion ya tiene un hijo izquierdo");
		BTNodo<E> nuevo = new BTNodo<E>(e,null,null,n);
		n.setLeft(nuevo);
		size++;
		return nuevo;
	}

	public Position<E> addLastChild(Position<E> p, E e) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(p);
		if(n.getRight()!=null) throw new InvalidPositionException("La posicion ya tiene un hijo derecho");
		BTNodo<E> nuevo = new BTNodo<E>(e,null,null,n);
		n.setRight(nuevo);
		size++;
		return nuevo;
	}

	public Position<E> addBefore(Position<E> p, Position<E> rb, E e) throws InvalidPositionException {
		BTNodo<E> padre = checkPosition(p);
		BTNodo<E> hermano = checkPosition(rb);
		if(padre.getLeft()!=null) throw new InvalidPositionException("El padre ya tiene dos hijos");
		if(hermano.getParent()!=padre || hermano!=padre.getRight()) throw new InvalidPositionException("El hermano no es hijo de su padre o bien el hermano no es hijo derecho");
		BTNodo<E> nuevo = new BTNodo<E>(e,null,null,padre);
		padre.setLeft(nuevo);
		size++;
		return nuevo;
	}

	public Position<E> addAfter(Position<E> p, Position<E> lb, E e) throws InvalidPositionException{
		BTNodo<E> padre = checkPosition(p);
		BTNodo<E> hermano = checkPosition(lb);
		if(padre.getRight()!=null) throw new InvalidPositionException("El padre ya tiene dos hijos");
		if(hermano.getParent()!=padre || hermano!=padre.getLeft()) throw new InvalidPositionException("El hermano no es hijo de su padre o bien el hermano no es hijo izquierdo");
		BTNodo<E> nuevo = new BTNodo<E>(e,null,null,padre);
		padre.setRight(nuevo);
		size++;
		return nuevo;
	}

	public void removeExternalNode(Position<E> p) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(p);
		if(isExternal(n)!=true) throw new InvalidPositionException("La posicion no es externa");
		removeNode(n);
	}

	public void removeInternalNode(Position<E> p) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(p);
		if(isInternal(n)!=true) throw new InvalidPositionException("La posicion no es interna");
		removeNode(n);
	}

	private BTNodo<E> getMin(BTNodo<E> node) {
	    while (node.getLeft() != null) {
	        node = node.getLeft();
	    }
	    return node;
	}
	
	public void removeNode(Position<E> p) throws InvalidPositionException {
	    BTNodo<E> remover = checkPosition(p);
	    
	    if(remover == raiz && size>1) throw new InvalidPositionException("No se puede eliminar una raiz con mas de un hijo");
	    
	    if (remover.getLeft() != null && remover.getRight() != null) {  // Nodo con dos hijos
	        BTNodo<E> successor = getMin(remover.getRight());  // Encuentra el sucesor inorden
	        remover.setElement(successor.element());  // Reemplaza el valor del nodo a eliminar con el sucesor
	        remover = successor;  // Ahora eliminamos el sucesor
	    }

	    BTNodo<E> child = (remover.getLeft() != null ? remover.getLeft() : remover.getRight());
	    
	    if (child != null) {  // Nodo con un solo hijo
	        child.setParent(remover.getParent());
	        if (remover == raiz) {
	            raiz = child;
	        } else if (remover == remover.getParent().getLeft()) {
	            remover.getParent().setLeft(child);
	        } else {
	            remover.getParent().setRight(child);
	        }
	    } else if (remover == raiz) {  // Nodo hoja y es la raíz
	        raiz = null;
	    } else {  // Nodo hoja y no es la raíz
	        if (remover == remover.getParent().getLeft()) {
	            remover.getParent().setLeft(null);
	        } else {
	            remover.getParent().setRight(null);
	        }
	    }

	    remover.setParent(null);
	    remover.setLeft(null);
	    remover.setRight(null);
	    size--;
	}


	public Position<E> left(Position<E> v) throws InvalidPositionException, BoundaryViolationException {
		BTNodo<E> n = checkPosition(v);
		if(n.getLeft()==null) throw new BoundaryViolationException("La posicion no tiene hijo izquierdo");
		return n.getLeft();
	}

	public Position<E> right(Position<E> v) throws InvalidPositionException, BoundaryViolationException {
		BTNodo<E> n = checkPosition(v);
		if(n.getRight()==null) throw new BoundaryViolationException("La posicion no tiene hijo derecho");
		return n.getRight();
	}

	public boolean hasLeft(Position<E> v) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(v);
		return (n.getLeft()!=null);
	}

	public boolean hasRight(Position<E> v) throws InvalidPositionException {
		BTNodo<E> n = checkPosition(v);
		return (n.getRight()!=null);
	}

	public Position<E> addLeft(Position<E> v, E r) throws InvalidOperationException, InvalidPositionException {
		BTNodo<E> padre = checkPosition(v);
		if(padre.getLeft()!=null) throw new InvalidOperationException("La posicion ya tiene hijo izquierdo");
		BTNodo<E> nuevo = new BTNodo<E>(r,null,null,padre);
		padre.setLeft(nuevo);
		size++;
		return nuevo;
	}

	public Position<E> addRight(Position<E> v, E r) throws InvalidOperationException, InvalidPositionException {
		BTNodo<E> padre = checkPosition(v);
		if(padre.getRight()!=null) throw new InvalidOperationException("La posicion ya tiene hijo derecho");
		BTNodo<E> nuevo = new BTNodo<E>(r,null,null,padre);
		padre.setRight(nuevo);
		size++;
		return nuevo;
	}

	public void attach(Position<E> p, BinaryTree<E> t1, BinaryTree<E> t2) throws InvalidPositionException {
		BTNodo<E> raiz_local = checkPosition(p);
		if (raiz_local.getLeft() != null || raiz_local.getRight() != null)
			throw new InvalidPositionException("La posicion no corresponde a un nodo hoja");
		try {
		//Clonación de T1 como subárbol izquierdo
		if (!t1.isEmpty()) {
			Position<E> raiz_t1 = t1.root();
			BTNodo<E> hi_raiz_local = new BTNodo<E>(raiz_t1.element(), raiz_local);
			raiz_local.setLeft(hi_raiz_local);
			clonar(raiz_local.getLeft(), raiz_t1, t1);
		}
		//Clonación de T2 como subárbol derecho
		if (!t2.isEmpty()) {
			Position<E> raiz_t2 = t2.root();
			BTNodo<E> hd_raiz_local = new BTNodo<E>(raiz_t2.element(), raiz_local);
			raiz_local.setRight(hd_raiz_local);
			clonar(raiz_local.getRight(), raiz_t2, t2);
		}
		size += t1.size() + t2.size();
		}catch(EmptyTreeException e) { raiz_local.setLeft(null); raiz_local.setRight(null); }
	}

	protected void clonar(BTNodo<E> padre_local, Position<E> padre_t, BinaryTree<E> t) {
	try {
		//Si existe hijo izquierdo en T de padre_t, se clona este y el subárbol a partir del hijo izquierdo de padre_t.
		if (t.hasLeft(padre_t)) {
			Position<E> hi_padre_t = t.left(padre_t);
			BTNodo<E> hi_padre_local = new BTNodo<E>(hi_padre_t.element(), padre_local);
			padre_local.setLeft(hi_padre_local);
			clonar(hi_padre_local, hi_padre_t, t);
		}
		//Si existe hijo derecho en T de padre_t, se clona este y el subárbol a partir del hijo derecho de padre_t.
		if (t.hasRight(padre_t)) {
			Position<E> hd_padre_t = t.right(padre_t);
			BTNodo<E> hd_padre_local = new BTNodo<E>(hd_padre_t.element(), padre_local);
			padre_local.setRight(hd_padre_local);
			clonar(hd_padre_local, hd_padre_t, t);
		}
		}catch(InvalidPositionException | BoundaryViolationException e) {
		padre_local.setLeft(null);
		padre_local.setRight(null);
	}
	}


}
